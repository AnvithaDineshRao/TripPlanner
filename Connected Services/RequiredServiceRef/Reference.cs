//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TouristSpotLocator.RequiredServiceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RequiredServiceRef.requiredser")]
    public interface requiredser {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/requiredser/GetData", ReplyAction="http://tempuri.org/requiredser/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/requiredser/GetData", ReplyAction="http://tempuri.org/requiredser/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/requiredser/Top10Words", ReplyAction="http://tempuri.org/requiredser/Top10WordsResponse")]
        string[] Top10Words(string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/requiredser/Top10Words", ReplyAction="http://tempuri.org/requiredser/Top10WordsResponse")]
        System.Threading.Tasks.Task<string[]> Top10WordsAsync(string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/requiredser/WordFilter", ReplyAction="http://tempuri.org/requiredser/WordFilterResponse")]
        string WordFilter(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/requiredser/WordFilter", ReplyAction="http://tempuri.org/requiredser/WordFilterResponse")]
        System.Threading.Tasks.Task<string> WordFilterAsync(string str);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface requiredserChannel : TouristSpotLocator.RequiredServiceRef.requiredser, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class requiredserClient : System.ServiceModel.ClientBase<TouristSpotLocator.RequiredServiceRef.requiredser>, TouristSpotLocator.RequiredServiceRef.requiredser {
        
        public requiredserClient() {
        }
        
        public requiredserClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public requiredserClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public requiredserClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public requiredserClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public string[] Top10Words(string url) {
            return base.Channel.Top10Words(url);
        }
        
        public System.Threading.Tasks.Task<string[]> Top10WordsAsync(string url) {
            return base.Channel.Top10WordsAsync(url);
        }
        
        public string WordFilter(string str) {
            return base.Channel.WordFilter(str);
        }
        
        public System.Threading.Tasks.Task<string> WordFilterAsync(string str) {
            return base.Channel.WordFilterAsync(str);
        }
    }
}
