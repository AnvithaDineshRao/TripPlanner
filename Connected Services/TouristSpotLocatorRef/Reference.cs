//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TouristSpotLocator.TouristSpotLocatorRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TouristSpotLocatorRef.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindNearestTouristSpots", ReplyAction="http://tempuri.org/IService1/FindNearestTouristSpotsResponse")]
        string[] FindNearestTouristSpots(string startingPoint, string zipcode, string interest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindNearestTouristSpots", ReplyAction="http://tempuri.org/IService1/FindNearestTouristSpotsResponse")]
        System.Threading.Tasks.Task<string[]> FindNearestTouristSpotsAsync(string startingPoint, string zipcode, string interest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/findNearestTransportStation", ReplyAction="http://tempuri.org/IService1/findNearestTransportStationResponse")]
        string[] findNearestTransportStation(string storeName, string zipcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/findNearestTransportStation", ReplyAction="http://tempuri.org/IService1/findNearestTransportStationResponse")]
        System.Threading.Tasks.Task<string[]> findNearestTransportStationAsync(string storeName, string zipcode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : TouristSpotLocator.TouristSpotLocatorRef.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<TouristSpotLocator.TouristSpotLocatorRef.IService1>, TouristSpotLocator.TouristSpotLocatorRef.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public string[] FindNearestTouristSpots(string startingPoint, string zipcode, string interest) {
            return base.Channel.FindNearestTouristSpots(startingPoint, zipcode, interest);
        }
        
        public System.Threading.Tasks.Task<string[]> FindNearestTouristSpotsAsync(string startingPoint, string zipcode, string interest) {
            return base.Channel.FindNearestTouristSpotsAsync(startingPoint, zipcode, interest);
        }
        
        public string[] findNearestTransportStation(string storeName, string zipcode) {
            return base.Channel.findNearestTransportStation(storeName, zipcode);
        }
        
        public System.Threading.Tasks.Task<string[]> findNearestTransportStationAsync(string storeName, string zipcode) {
            return base.Channel.findNearestTransportStationAsync(storeName, zipcode);
        }
    }
}
